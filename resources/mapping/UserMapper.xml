<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ognice.dao.UserMapper">
	<resultMap id="BaseResultMap" type="com.ognice.domain.User">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="username" property="username" jdbcType="VARCHAR" />
		<result column="psw" property="psw" jdbcType="VARCHAR" />
		<result column="nickname" property="nickname" jdbcType="VARCHAR" />
		<result column="created" property="created" jdbcType="TIMESTAMP" />
		<result column="role" property="role" jdbcType="INTEGER" />
		<result column="level" property="level" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Base_Column_List"> id, username, psw, nickname, created, role, level
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
		select
		<include refid="Base_Column_List" />
		from user where id = #{id,jdbcType=BIGINT}
	</select>
	<select id="selectByUsername" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user where username = #{0}
	</select>
	<select id="page" parameterType="com.ognice.controller.common.PageSearchParam" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user where 1=1
		<if test="params!=null">
			<if test="params.username!=null and params.username!=''"> AND username like concat('%',#{params.username},'%')
			</if>
			<if test="params.nickname!=null and params.nickname!=''"> and nickname like concat('%',#{params.nickname},'%')
			</if>
		</if>
		<if test="page!=null"> limit #{page},#{pagesize}
		</if>
	</select>
	<select id="login" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user where username = #{0} AND psw = #{1}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long"> delete from user where id = #{id,jdbcType=BIGINT}
	</delete>
	<insert id="insert" parameterType="com.ognice.domain.User"> insert into user (id, username, psw, nickname, created, role, level) values (#{id,jdbcType=BIGINT}, #{username,jdbcType=VARCHAR}, #{psw,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, #{created,jdbcType=TIMESTAMP}, #{role,jdbcType=INTEGER}, #{level,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="com.ognice.domain.User">
		insert into user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null"> id,
			</if>
			<if test="username != null"> username,
			</if>
			<if test="psw != null"> psw,
			</if>
			<if test="nickname != null"> nickname,
			</if>
			<if test="created != null"> created,
			</if>
			<if test="role != null"> role,
			</if>
			<if test="level != null"> level,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null"> #{id,jdbcType=BIGINT},
			</if>
			<if test="username != null"> #{username,jdbcType=VARCHAR},
			</if>
			<if test="psw != null"> #{psw,jdbcType=VARCHAR},
			</if>
			<if test="nickname != null"> #{nickname,jdbcType=VARCHAR},
			</if>
			<if test="created != null"> #{created,jdbcType=TIMESTAMP},
			</if>
			<if test="role != null"> #{role,jdbcType=INTEGER},
			</if>
			<if test="level != null"> #{level,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.ognice.domain.User">
		update user
		<set>
			<if test="username != null"> username = #{username,jdbcType=VARCHAR},
			</if>
			<if test="psw != null"> psw = #{psw,jdbcType=VARCHAR},
			</if>
			<if test="nickname != null"> nickname = #{nickname,jdbcType=VARCHAR},
			</if>
			<if test="created != null"> created = #{created,jdbcType=TIMESTAMP},
			</if>
			<if test="role != null"> role = #{role,jdbcType=INTEGER},
			</if>
			<if test="level != null"> level = #{level,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.ognice.domain.User"> update user set username = #{username,jdbcType=VARCHAR}, psw = #{psw,jdbcType=VARCHAR}, nickname = #{nickname,jdbcType=VARCHAR}, created = #{created,jdbcType=TIMESTAMP}, role = #{role,jdbcType=INTEGER}, level = #{level,jdbcType=INTEGER} where id = #{id,jdbcType=BIGINT}
	</update>
</mapper>